{
  "blogPosts": [
    {
      "id": "/面经",
      "metadata": {
        "permalink": "/blog/面经",
        "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/面经.md",
        "source": "@site/blog/面经.md",
        "title": "面经",
        "description": "实习面经",
        "date": "2023-09-04T01:31:30.000Z",
        "formattedDate": "2023年9月4日",
        "tags": [],
        "readingTime": 32.865,
        "hasTruncateMarker": false,
        "authors": [],
        "frontMatter": {
          "sidebar": "auto",
          "sidebarDepth": 2
        }
      },
      "content": ":::info 早期黑历史\r\n:::\r\n## 实习面经  \r\n\r\n### 腾讯 WXG 一面 \r\n\r\n很久以前面的，第一次面试，失败原因总结：过于紧张，基础不扎实。\r\n\r\n1. 自我介绍。\r\n\r\n2. 讲一讲Vue的源码。我直接从Vue实例的创建开始，打算一步步的解释，面试官打断说让我讲一下Vue的架构（应该是指Observer, Compiler, Watch这三部分吧？）\r\n\r\n3. 浏览器的渲染原理。\r\n\r\n   我以为问的是生成DOM渲染树，布局和绘制，以及回流和重绘的知识点。结果面试官又问我：HTML是怎么转换成DOM树的，然后我就蒙圈了...\r\n\r\n   之后谷歌了一下，大概的步骤如下\r\n\r\n   1. 编码\r\n   2. 预解析\r\n   3. 标记\r\n   4. 构建树\r\n\r\n   [详细的构建过程](https://segmentfault.com/a/1190000018730884)\r\n\r\n4. Script标签对浏览器的阻塞问题。[参考](https://www.zcfy.cc/article/building-the-dom-faster-speculative-parsing-async-defer-and-preload-x2605-mozilla-hacks-8211-the-web-developer-blog)\r\n\r\n   Script脚本的执行会阻塞html的解析，外链script的下载也会阻塞。\r\n\r\n   那么多个script标签代码的执行，也必然是顺序执行，多个script外链的请求到底是串行还是并行的呢？\r\n\r\n   比较容易混淆，所以容易会认为请求是串行的，因为\r\n\r\n   ```html\r\n\t<script type=\"text/javascript\" src=\"./test.js\"></script>\r\n       <script type=\"text/javascript\" src=\"./test2.js\"></script>\r\n   ```\r\n   \r\n   可能会认为下面html的文档的解析要等到上面script执行完才会开始，因为会阻塞。\r\n\r\n   但其实请求是并行的。\r\n\r\n   因为html解析成dom的时候会先进行预解析。\r\n\r\n5. 前端常见加密，比如MD5。\r\n\r\n   当初面的时候很紧张，没答好。\r\n\r\n6. 问：闭包会造成什么？ \r\n\r\n   结果我脱口而出，会造成内存泄漏...但实际上闭包会造成内存泄漏这种说法是由于以前IE浏览器的BUG。现在很多人都说闭包会造成内存泄漏，实在是以讹传讹，瞎写代码才会（逃\r\n\r\n7. 性能优化手段。\r\n\r\n\r\n\r\n以下是春招的面试经历\r\n\r\n### 腾讯 CSIG 一面 \r\n\r\n一面过了，感谢面试官\r\n\r\n1. 介绍一下自己，什么时候开始学习前端的，学习前端的方式，平时都看过哪些书？\r\n\r\n   大概讲了一下自己的学习经历，看过什么书籍。\r\n\r\n2. 问高程上我觉得印象深刻的地方？\r\n\r\n   我随便说了两个，原型链和this，面试官随便问了点相关知识。\r\n\r\n   1. 实现**私有的方法/属性**，我只回答了两种，一个是提前约定好的私有变量，比如`_`开头的变量；或者用闭包实现。\r\n\r\n      不过答的时候说的有点混乱。\r\n\r\n      闭包：\r\n\r\n      ``` js\r\n      // 闭包一，实例的私有属性\r\n      class Person {\r\n          constructor() {\r\n              let value = 233\r\n              this.getValue = function() {\r\n                  return value\r\n              }\r\n          }\r\n      }\r\n      \r\n      // 闭包二，原型对象的私有属性\r\n      const Person = (function () {\r\n          let value = '111'\r\n          class Person {\r\n              getValue() {\r\n                  return value\r\n              }\r\n          }\r\n          return Person\r\n      })()\r\n      ```\r\n\r\n      也可以使用Symbol来实现（比较推荐）\r\n\r\n      ``` js\r\n      const Person = (function () {\r\n          let s = Symbol()\r\n          class Person {\r\n              constructor() {\r\n                  this[s] = '111'\r\n              }\r\n              getValue() {\r\n                  return this[s]\r\n              }\r\n          }\r\n          return Person\r\n      })()\r\n      ```\r\n\r\n   2. ES5实现继承的方法，构造继承，原型链继承，组合继承，寄生组合继承。\r\n\r\n   3. this的原理，call，apply，bind的区别。\r\n\r\n3. 垂直居中的几种方法。\r\n\r\n   为什么下面的margin可以居中？不太清楚，只知道有这种技巧。\r\n\r\n   ``` css\r\n   .outer {\r\n       display: flex;\r\n   }\r\n   \r\n   .inner {\r\n       margin: auto;\r\n   }\r\n   ```\r\n\r\n   [网上搜到了一个讲这个的，还挺实用的](https://www.cnblogs.com/coco1s/p/10910588.html)\r\n\r\n   块级元素中，当margin-top和margin-bottom为auto时，他们的值为0，所以无法实现垂直居中。\r\n\r\n   而在flex内部，当我们设置`margin: auto`的时候，会将剩下的空闲空间（水平与垂直）分配给该元素的margin。\r\n\r\n   因此，借由`flex`和`margin`，我们可以更加简单的实现某些功能，比如一个普通的导航栏\r\n\r\n   ``` html\r\n   <ul class=\"g-nav\">\r\n       <li>导航A</li>\r\n       <li>导航B</li>\r\n       <li>导航C</li>\r\n       <li>导航D</li>\r\n       <li class=\"g-login\">登陆</li>\r\n       <li>注册</li>\r\n   </ul>\r\n   <style>\r\n       .g-nav {\r\n           display: flex;\r\n           padding: 0;\r\n           margin: 0;\r\n           list-style: none;\r\n       }\r\n       .g-nav li {\r\n           padding: 0 20px;\r\n       }\r\n   \r\n       .g-login {\r\n           margin-left: auto;\r\n       }\r\n   </style>\r\n   ```\r\n   \r\n\r\nmargin-top为负值，除了绝对定位还有哪些地方碰到过？说了个双飞燕/圣杯布局，不太清楚其他的应用场景。\r\n\r\n\r\n\r\n4. 问我平时写不写HTML标签/CSS，这问题有点懵。然后面试官解释说，有的地方写项目代码分工明确，有的人只写CSS，有的人只写JS。\r\n\r\n   问前端语义化标签，什么时候你会用到这些标签，语义化标签的好处/作用？\r\n\r\n   这个不太清楚怎么回答，我说了个对搜索引擎友好？晚点查一查。\r\n\r\n   1. 搜索引擎友好\r\n   2. 便于团队开发和维护\r\n   3. css未加载时也有清晰的结构\r\n\r\n5. 怎么用正则判断当前域名是否为qq.com，或者xxx.qq.com。\r\n\r\n   我用的split做的...很繁琐，边界条件的检查也很麻烦，还是正则好。\r\n\r\n   正则的写法\r\n\r\n   ``` js\r\n   function isUrl(url) {\r\n       return /^https?:\\/\\/(.+\\.)?qq\\.com/.test(url)\r\n   }\r\n   isUrl(location.href)\r\n   ```\r\n\r\n6. 响应状态码，200(from disk cache)，200（from memory cache），304的区别。\r\n\r\n   见本博客的Http缓存一节。\r\n\r\n   至于from disk cache 和 from memory cache的区别。\r\n\r\n   比如第一次打开新页面（有缓存），资源会从硬盘中读取；而如果在已经打开的页面刷新，资源会从内存中读取。\r\n\r\n   \r\n\r\n   Etag是什么？\r\n\r\n   通常就是一个资源的哈希值吧。\r\n\r\n7. try...catch...中如果异步代码出错怎么办？如：\r\n\r\n   ``` js\r\n   try {\r\n       throw new Error('111')\r\n   } catch (e) {\r\n       console.log(1)\r\n   }\r\n   // 捕捉到异常，输出1\r\n   \r\n   try {\r\n       setTimeout(() => {\r\n           throw new Error('222')\r\n       })\r\n   } catch (e) {\r\n       console.log(2)\r\n   }\r\n   // 未能捕捉到异常，不输出2\r\n   ```\r\n\r\n   怎么办？\r\n\r\n   ``` js\r\n   async function A() {\r\n       try {\r\n           await new Promise((resolve, reject) => {\r\n               setTimeout(() => {\r\n                   reject(new Error('222'))\r\n               })\r\n           })\r\n       } catch (e) {\r\n           console.log(e)\r\n       }\r\n   }\r\n   ```\r\n\r\n   当await后面的promise状态为reject时，会抛出错误。所以我们可以搭配async/await和promise来进行异步的错误捕捉。\r\n\r\n8. 为什么移动端以前有300ms的问题，原理？fastclick的原理答不上来。\r\n\r\n  移动端，当用户点击屏幕的时候，先后触发touchstart, touchmove, touchend, click。其中touchend和click的间隔为300秒，这是为了处理移动端的双击缩放。\r\n\r\n  fastclick原理。在touchend阶段，会调用e.preventDefault，然后使用document.createEvent创建一个事件，并在目标元素上触发。\r\n\r\n9. XSS的原理，如何防御XSS？为什么换成实体字符就好了？\r\n\r\n   虽然我大概了解一些，但总感觉答的不是很好。\r\n\r\n   字符<会被当成标签，而实体字符只会当成纯粹的文本。\r\n\r\n10. 找出数组中n项，n项的和为m。\r\n\r\n  解答过程我写在编程题一节。\r\n\r\n  \r\n\r\n### 腾讯 CSIG 二面 \r\n\r\n分享屏幕，写代码。\r\n\r\n1. 问我的前端是怎么学习的...问了挺多，各种细枝末节的东西。\r\n\r\n2. 创建一个 Person 类，其包含公有属性 name 和私有属性 age 以及公有方法 setAge ；创建一个 Teacher 类，使其继承 Person ，并包含私有属性 studentCount 和私有方法 setStudentCount 。\r\n\r\n   ``` js\r\n   const Person = (function () {\r\n       let s = Symbol('age')\r\n       class Person {\r\n           constructor(name) {\r\n               this.name = name\r\n           }\r\n       \r\n           setAge(newAge) {\r\n               this[s] = newAge\r\n           }\r\n   \r\n           getAge() {\r\n               return this[s]\r\n           }\r\n       }\r\n   \r\n       return Person\r\n   })()\r\n   \r\n   const Teacher = (function () {\r\n       let studentCount\r\n       const setStudentCount = (count) => {\r\n           studentCount = count\r\n       }\r\n       return class Teacher extends Person {\r\n           constructor(name) {\r\n               super(name)\r\n           }\r\n           set(count) {\r\n               setStudentCount(count)\r\n           }\r\n       }\r\n   })()\r\n   ```\r\n\r\n   以上是我面试的时候写出来的，但写的挺怪的...回来想了想，可以改写如下代码。\r\n\r\n   ``` js\r\n   const [Person, Teacher] = (function () {\r\n       const s = Symbol('age')\r\n       const c = Symbol('studentCount')\r\n       const setStudentCount = Symbol('setCount')\r\n       class Person {\r\n           constructor(name, age) {\r\n               this.name = name\r\n               this[s] = age\r\n           }\r\n   \r\n           setAge(age) {\r\n               this[s] = age\r\n           }\r\n       }\r\n       \r\n       class Teacher extends Person {\r\n           constructor(name, age, count) {\r\n               super(name, age)\r\n               this[c] = count\r\n           }\r\n           [setStudentCount](count) {\r\n               this[c] = count\r\n           }\r\n           set(count) {\r\n               this[setStudentCount](count)\r\n           }\r\n       }\r\n       return [Person, Teacher]\r\n   })()\r\n   ```\r\n\r\n3. 输入框输入值后，数组内找值， 返回匹配的字符串。类似百度输入框的效果。\r\n\r\n   ``` html\r\n   <!DOCTYPE html>\r\n   <html lang=\"en\">\r\n   <head>\r\n       <meta charset=\"UTF-8\">\r\n       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n       <title>Document</title>\r\n       <style>\r\n   \r\n           body {\r\n               margin: 0;\r\n               position: relative;\r\n               height: 100vh;\r\n           }\r\n           \r\n   \r\n           .center {\r\n               box-sizing: border-box;\r\n               width: 400px;\r\n               padding: 4px 6px;\r\n               position: absolute;\r\n               top: 35%;\r\n               left: 50%;\r\n               transform: translateX(-50%);\r\n               display: flex;\r\n               flex-direction: column;\r\n           }\r\n           .input {\r\n               padding: 10px 4px;\r\n           }\r\n           .list div {\r\n               padding: 10px 6px;\r\n               border: 1px solid #ddd;\r\n           }\r\n   \r\n           .list div:hover {\r\n               background: grey;\r\n               cursor: pointer;\r\n           }\r\n   \r\n           .list div:not(:last-child) {\r\n               border-bottom: 1px solid #ddd;\r\n           }\r\n       </style>\r\n   </head>\r\n   <body>\r\n       <div class='center'>\r\n           <input type=\"text\" class='input'>\r\n           <div class='list'>\r\n               \r\n           </div>\r\n       </div>\r\n      \r\n   <script>\r\n           \r\n           const dataList = ['航空母舰','航空吴六', '无关数据', '航x空', '航空飞行器']\r\n           const el = document.querySelector('.input')\r\n           const list = document.querySelector('.list')\r\n   \r\n   \r\n           function debounce(fn, wait) {\r\n               let timer\r\n               return function () {\r\n                   timer && clearTimeout(timer)\r\n                   timer = setTimeout(() => {\r\n                       fn.call(this)\r\n                   }, wait)\r\n               }\r\n           }\r\n           \r\n           function getData() {\r\n               list.innerHTML = ''\r\n               let value = el.value\r\n               let ret = []\r\n               for (let i of dataList) {\r\n                   if (i.includes(value)) {\r\n                       ret.push(i)\r\n                   }\r\n               }\r\n               \r\n               ret.forEach(item => {\r\n                   let el = document.createElement('div')\r\n                   el.innerText = item\r\n                   list.appendChild(el)\r\n               })\r\n           }\r\n   \r\n           el.addEventListener('input', debounce(getData, 1000))\r\n       </script>\r\n   </body>\r\n   </html>\r\n   \r\n   ```\r\n\r\n4. 请写一个函数，计算一篇英文文章中出现次数最多的单词及出现次数。\r\n\r\n   ``` js\r\n   function getWordAnd(str) {\r\n       let arr = str.split(/[,\\.\\s]/)\r\n       let map = new Map()\r\n       let ret = [[], 0]\r\n       arr.forEach(word => {\r\n           if (word !== '') {\r\n               if (map.has(word)) {\r\n                   let times = map.get(word)\r\n                   map.set(word, times + 1)\r\n               } else {\r\n                   map.set(word, 1)\r\n               }\r\n           }\r\n       })\r\n       for (let [i, j] of map) {\r\n           if (j > ret[1]) {\r\n               ret[0] = [i]\r\n               ret[1] = j\r\n           } else if (j === ret[1]) {\r\n               ret[0].push(i)\r\n           }\r\n       }\r\n       return ret\r\n   }\r\n   ```\r\n\r\n5. 问我有什么上线的项目，我说以前的现在都下线了...只有源码。简历是你自己写的吗，答我是fork的...博客呢？我用vuepress搭的，以前写过ghost的主题。（总之就是被吐槽项目经历太少\r\n\r\n6. 有什么想问的吗？\r\n\r\n   面试官觉得我哪里需要提高，面试官说我还行，不过项目经历太少了。然后我说所以我想去实习提高项目经历，被教训了一顿...真正的高手自己一个人随便写项目，根本不用实习。（唉，我太菜了\r\n\r\n希望能过吧，我一定好好写项目...\r\n\r\n\r\n\r\n### 腾讯 CSIG 三面\r\n\r\n1. 问项目，我这块答的好差，唉。\r\n2. Websocket原理，socket.io除了基本的那几个还有哪些Api（太久没用socket.io了，根本不记得啊...），如果客户端突然断网了怎么办（应该是问的心跳包，忘记具体的流程了）\r\n3. 海量日志中找ip最多出现次数，不会\r\n4. 智力题（此时我心态已经失衡...），100人教室70人喜欢足球，80人喜欢篮球，问同时喜欢足球和篮球的人数。这时候我的心态真的是超级爆炸，随便说了个答案，唉，暴露了自己智商低的事实。\r\n5. Http1.1和HTTP2.0的区别，头部有哪些，然后问我现在主要用哪个，我说2.0，结果她问为什么我们网校的网站基本用的1.1...\r\n\r\n\r\n\r\n表现贼差，结果等了一个星期竟然过了！我爱腾讯！\r\n\r\n\r\n\r\n### 腾讯 CSIG HR面\r\n\r\n1. 自我介绍\r\n\r\n2. 印象深刻的项目，负责怎样的角色\r\n\r\n3. 考不考研\r\n\r\n4. 有没有女朋友\r\n\r\n5. 还有哪些在流程中\r\n\r\n6. 实习的情况，课多不多，可不可以远程实习\r\n\r\n7. 想问什么\r\n\r\n8. 口头offer\r\n\r\n\r\n\r\n感谢腾讯！\r\n\r\n\r\n\r\n### 阿里 钉钉 一面\r\n\r\n1. 自我介绍\r\n\r\n2. 移动端和PC端的一些区别，技术的选型的区别，兼容性方面的问题。Iphone5和Iphone6的像素不同应该如何处理。\r\n\r\n3. Webpack的按需加载 imort() 和 代码分割\r\n\r\n4. 单页应用和多页应用的优缺点对比。\r\n\r\n   单页应用有SEO问题，那么前端通常如何解决SEO的问题呢，没答上来（服务端渲染和同构）\r\n\r\n   单页应用的好处有哪些，有点忘了（囧），前后端分离。\r\n\r\n5. 三列布局，flex，圣杯布局，双飞燕布局。\r\n\r\n6. 虚拟DOM的优缺点\r\n\r\n   当我们使用虚拟DOM，虚拟DOM的Diff后，我们还是要操作真实的DOM。\r\n\r\n   优点：保证性能的下限。我们操作虚拟DOM后，框架底层会自动操作真实的DOM，因此我们可以保障性能的最下限\r\n\r\n   缺点：正是同样的道理，虚拟DOM可以保障性能的最下限的前提，是其失去了性能的最上限。如果有一个大牛，代码非常牛逼，它操作真实DOM就可以实现性能最大化。但是虚拟DOM却失去了最大化的可能性。\r\n\r\n7. 编程题\r\n\r\n   ``` js\r\n   //评测题目: 无\r\n   /*\r\n   \r\n   题目\r\n   实现一个方法，用于比较两个版本号（version1、version2）\r\n   如果version1 > version2，返回1；如果version1 < version2，返回-1，其他情况返回0。版本号规则`x.y.z`，xyz均为大于等于0的整数，至少有x位\r\n   输入输出样例\r\n   （如果题目不是实现函数，可以用其他更直观的方法描述预期行为）\r\n   样例一\r\n   输入：compareVersion('0.1', '1.1.1')\r\n   输出：-1\r\n   样例二\r\n   输入：compareVersion('13.37', '1.2 ')\r\n   输出：1\r\n   样例三\r\n   输入：compareVersion('1.1', '1.1.0')\r\n   输出：0\r\n   */\r\n   \r\n   function compareVersion(v1, v2) {\r\n       let arr1 = v1.split('.')\r\n       let arr2 = v2.split('.')\r\n       let maxLength = Math.max(arr1.length, arr2.length)\r\n       for (let i = 0; i < maxLength; i++) {\r\n           let a = arr1[i] || 0 // 开始给他看的时候没加这个。因为长度不一定一样，可能是undefined\r\n           let b = arr2[i] || 0\r\n           if (a > b) return 1\r\n           if (a < b) return -1\r\n       }\r\n       return 0\r\n   }\r\n   ```\r\n\r\n8. 唠嗑。阿里钉钉最近的情况。\r\n\r\n\r\n\r\n阿里插曲1：面的时候表现很不错，结果之后发现流程上变成“已回绝”，失眠，难受了一晚上。\r\n\r\n结果第二天的时候和我说，只是流程打回去了而已，对我没影响（？？？难受一晚上也叫没影响？）\r\n\r\n### 阿里 钉钉 二面\r\n\r\n阿里插曲2：电话打过来问我有没有注册钉钉，我说没有（= =事后发现自己是有注册过的，囧）...\r\n\r\n1. 自我介绍。问成绩。\r\n\r\n2. 计算机网络七层介绍，TCP和UDP使用场景的区别，DNS的TTL是什么。\r\n\r\n   说我用谷歌，那我是怎么翻墙的... 。我说我之前搭过，后来挂了就用别人的。面试官问我为什么我的就挂了，其他人的就没挂（谁的机场这么稳定？）。\r\n\r\n3. 键盘和CPU是如何相连的，交互原理。\r\n\r\n4. 市面上硬盘主要是什么接口。\r\n\r\n5. 一个CPU是怎么进行进程直接的切换，以及资源是如何分配的，CPU怎么知道切换哪个进程。\r\n\r\n   网卡是如何做到同时听音乐和下载东西的。\r\n\r\n6. 图论，有限图中两点最小距离的算法。\r\n\r\n7. 常见排序算法\r\n\r\n8. 前端性能优化\r\n\r\n9. 印象深刻的项目\r\n\r\n10. 兴趣爱好。我说动画啥的，他说他指的是硬件相关的爱好...有没有写过什么机器人呀之类的。然后被吐槽我的爱好优点像文科生（这算不算刻板印象？我这个人爱好广泛的很，小说、动画、漫画、音乐、游戏、电影我都很喜欢，我还想学好英语/日语，想学好画画，围棋业余三段，热爱日麻，还玩过一阵子德州扑克，经常看新闻，甚至开始对历史感兴趣了，特别爱任天堂游戏。难道理科生就一定要喜欢硬件吗？）\r\n\r\n\r\n\r\n阿里插曲3：交谈中大概谈到我写的博客，很明显感觉到面试官的轻视，他用了“从其他地方复制过来”这一词，仿佛这些东西都是没过我脑子就复制过来一样，服了。\r\n\r\n\r\n\r\n### 阿里 钉钉三面（交叉面）\r\n\r\n二面很久后突然说要面，这一面是我面试凉的最快的一次，随便写点。\r\n\r\n1. 自我介绍，项目\r\n2. 数据结构，数组和链表区别，平衡二叉树等。\r\n3. 排序算法。\r\n4. 数据库，索引，事务，死锁。\r\n\r\n\r\n\r\n### 字节跳动 一面\r\n\r\n1. 自我介绍，介绍完直接发个我五道题（太吓人了）\r\n\r\n2. 用CSS实现一个开关样式，hover时触发，滑块为正方形。\r\n\r\n   1. 1. 开关动作均有动画过度（滑块移位、背景色）\r\n\r\n   1. 1. 只用一个dom元素实现\r\n      2. 开关的高度是固定的，但宽度不固定，即宽度为未知父元素的100%，宽度始终大于高度\r\n\r\n   写出来了，但不够优雅...以下是修改后的代码\r\n\r\n   ``` html\r\n   <div class='contain'>\r\n       \r\n   </div>\r\n   <style>\r\n       .contain {\r\n           --padding: 4px;\r\n           --height: 40px;\r\n           position: relative;\r\n           width: 100px;\r\n           height: var(--height);\r\n           padding: var(--padding);\r\n           background: grey;\r\n           transition: all .3s;\r\n       }\r\n       \r\n       .contain:hover {\r\n           background: green;\r\n       }\r\n       \r\n       .contain::before {\r\n           content: '';\r\n           position: absolute;\r\n           z-index: 1;\r\n           right: calc(100% - 40px - var(--padding));\r\n           height: var(--height);\r\n           width: var(--height);\r\n           transition: all .3s;\r\n           background: #fff;\r\n       }\r\n       .contain:hover::before {\r\n           right: var(--padding);\r\n       }\r\n   </style>\r\n   ```\r\n\r\n3. ``` js\r\n   // 写出下面这段代码打印的结果\r\n   var result = [];\r\n   var a = 3;\r\n   var total = 0;\r\n   function foo(a) {\r\n     var i = 0;\r\n     for (; i < 3; i++) {\r\n       result[i] = function() {\r\n         total += i * a;\r\n         console.log(total);\r\n       }\r\n     }\r\n   }\r\n   \r\n   foo(1);\r\n   result[0]();\r\n   result[1]();\r\n   result[2]();\r\n   \r\n   // 3, 6, 9\r\n   // 因为i始终是3，差点上钩\r\n   ```\r\n\r\n4. ``` js\r\n   // 写出下面这段代码打印的结果\r\n   async function async1() {\r\n     console.log('async1 start');\r\n     await async2();\r\n     console.log('async1 end');\r\n   }\r\n   \r\n   async function async2() {\r\n     console.log('async2 start');\r\n     return new Promise((resolve, reject) => {\r\n       resolve();\r\n       console.log('async2 promise');\r\n     })\r\n   }\r\n   \r\n   console.log('script start');\r\n   \r\n   setTimeout(function() {\r\n     console.log('setTimeout');\r\n   }, 0);\r\n   \r\n   async1();\r\n   \r\n   new Promise(function(resolve) {\r\n     console.log('promise1');\r\n     resolve();\r\n   }).then(function() {\r\n     console.log('promise2');\r\n   }).then(function() {\r\n     console.log('promise3');\r\n   });\r\n   \r\n   console.log('script end');\r\n   \r\n   \r\n   // 答案\r\n   script start\r\n   async1 start\r\n   async2 start\r\n   async2 promise\r\n   promise1\r\n   script end\r\n   promise2\r\n   promise3\r\n   async1 end\r\n   setTimeout\r\n   \r\n   // 但我之前把async1 end写在promise2前面了，想了想才发现自己错在哪里。\r\n   \r\n   function A() {\r\n       return new Promise((r) => {\r\n           r()\r\n       })\r\n   }\r\n   console.log(A())\r\n   // Promise<resolved>\r\n   \r\n   async function A() {\r\n       return new Promise((r) => {\r\n           r()\r\n       })\r\n   }\r\n   console.log(A())\r\n   // promise<pending>\r\n   \r\n   // 可以看到async函数和普通函数最终返回的promise状态是不同的。\r\n   // 我们可以再做一个实验。\r\n   let p\r\n   function A() {\r\n       p = new Promise((r) => {\r\n           r()\r\n       })\r\n   \r\n       return p\r\n   }\r\n   let a = A()\r\n   console.log(a === p) // true\r\n   \r\n   let p\r\n   async function A() {\r\n       p = new Promise((r) => {\r\n           r()\r\n       })\r\n   \r\n       return p\r\n   }\r\n   let a = A()\r\n   console.log(a === p) // false\r\n   \r\n   // 个人观点：\r\n   async function A() {\r\n       return new Promise() {}\r\n   }\r\n   // 执行函数A返回的promise初始状态是pending，并且会生成一个微任务放进微任务队列，当执行该任务后状态才会改变\r\n   // 现在终于可以回答下面两个代码为什么输出顺序不同了\r\n   \r\n   async function A() {\r\n       await B()\r\n       console.log('a')\r\n   }\r\n   \r\n   function B() { // 此时不是async函数\r\n       return new Promise((r) => {\r\n           r()\r\n       })\r\n   }\r\n   A()\r\n   \r\n   new Promise((resolve) => {resolve()}).then(() => {\r\n       console.log('b')\r\n   })\r\n   \r\n   // a b\r\n   \r\n   // ------------ 分割线 -------------- \r\n   \r\n   async function A() {\r\n       await B()\r\n       console.log('a')\r\n   }\r\n   \r\n   async function B() {\r\n       return new Promise((r) => {\r\n           r()\r\n       })\r\n   }\r\n   A()\r\n   \r\n   new Promise((resolve) => {resolve()}).then(() => {\r\n       console.log('b')\r\n   })\r\n   // b a\r\n   \r\n   ```\r\n\r\n5. ``` js\r\n   // 实现一个二进制加法，输入输出均为二进制字符串\r\n   function binaryAdd(num1: string, num2: string): string {\r\n     // TODO\r\n   }\r\n   //Example\r\n   binaryAdd('1010', '111') // '10001'\r\n   \r\n   // 其实就是两数相加，只是换成了二进制而已\r\n   function binaryAdd(num1, num2) {\r\n       let carry = 0\r\n       let ret = []\r\n       const [len1, len2] = [num1.length, num2.length]\r\n       const maxLen = Math.max(len1, len2)\r\n       num1 = num1.padStart(maxLen, '0')\r\n       num2 = num2.padStart(maxLen, '0')\r\n       let arr1 = num1.split('')\r\n       let arr2 = num2.split('')\r\n       for (let i = maxLen - 1; i >= 0; i--) {\r\n           let [n1, n2] = [arr1[i], arr2[i]].map(i => Number(i))\r\n           let sum = n1 + n2 + carry\r\n           carry = sum >= 2 ? 1 : 0\r\n           sum %= 2\r\n           ret.unshift(sum.toString())\r\n       }\r\n       if (carry) ret.unshift('1')\r\n       return ret.join('')\r\n   }\r\n   ```\r\n   \r\n6. ``` js\r\n   // 实现一个带并发限制的异步调度器Scheduler，保证同时运行的任务最多有两个。完善代码中Scheduler类，使得以下程序能正确输出\r\n   class Scheduler {\r\n     add(promiseCreator) {\r\n       // TODO\r\n     }\r\n     // TODO\r\n   }\r\n   const timeout = (time) => new Promise(resolve => {\r\n     setTimeout(resolve, time)\r\n   })\r\n   const scheduler = new Scheduler();\r\n   const addTask = (time, order) => {\r\n     scheduler.add(() => timeout(time))\r\n       .then(() => console.log(order))\r\n   }\r\n   \r\n   addTask(1000, '1')\r\n   addTask(500, '2')\r\n   addTask(300, '3')\r\n   addTask(400, '4')\r\n   // output: 2 3 1 4\r\n   // 一开始，1、2两个任务进入队列\r\n   // 500ms时，2完成，输出2，任务3进队\r\n   // 800ms时，3完成，输出3，任务4进队\r\n   // 1000ms时，1完成，输出1\r\n   // 1200ms时，4完成，输出4\r\n   \r\n   // 没做出来，讲了个大概思路，面试官说这道是附加题，写法比较巧妙。\r\n   \r\n   ```\r\n7. 浏览器/Node的事件循环\r\n\r\n8. 浏览器的渲染机制\r\n\r\n9. CSRF的原理和防御\r\n\r\n10. 有什么想问的吗\r\n\r\n\r\n\r\n### 字节跳动 二面\r\n\r\n1. 自我介绍\r\n\r\n2. 把数字用千分位分割，如15000000分割为15,000,000\r\n\r\n   ``` js\r\n   function transform (num) {\r\n       let arr = []\r\n       while (num >= 1000) {\r\n           let value = num % 1000\r\n           num = num / 1000\r\n           if (value >= 100) {\r\n               value = '' + value\r\n           } else if (100 > value && value >= 10 ){\r\n               value = `0${value}`\r\n           } else {\r\n               value = `00${value}`\r\n           }\r\n           \r\n           arr.unshift(value)\r\n       }\r\n       num = '' + num\r\n       arr.unshift(num)\r\n       console.log(arr.join(','))\r\n   }\r\n   transform(15000000)\r\n   ```\r\n\r\n   问：除了用数字，还有什么方便的方法吗？\r\n\r\n   之后查了资料，发现可以通过`toLocaleString`或正则来实现\r\n\r\n   正则: `num.toString().replace(/\\d{1,3}(?=(?:\\d{3})+$)/g, '$&,')`\r\n\r\n3. HTTP2.0和1.1的对比，优点？缺点？\r\n\r\n4. 服务端推送的资源放在哪里？\r\n\r\n5. 浏览器缓存，你的JS资源是如何使用不同的缓存策略的呢？不太清楚，我说的用webpack进行代码分割，然后分别使用不同的策略\r\n\r\n   通常过期时间设置为多久？\r\n\r\n6. 了解哪些跨域。其中cors，post方法算简单请求吗，带cookie需要预检吗？\r\n\r\n7. 之前有提到service worker，有了解吗（没，自己给自己挖坑...）\r\n\r\n8. Node有了解吗，一些Node的优缺点（密集型），Node是单进程还是多进程。\r\n\r\n   node是i/o密集型，但处理cpu密集型任务很吃力。面试的时候好像答反了。。。\r\n\r\n   Koa，Egg有了解过吗。\r\n\r\n9. 算法题：\r\n\r\n   实现js方法，查找第一个缺失的正整数。 时间复杂度O(n) ，空间复杂度 O(1)\r\n\r\n   Example 1:\r\n\r\n   Input: [[1,2,0](https://marvel.bytedance.net/)] Output: 3 \r\n\r\n   Example 2:\r\n\r\n   Input: [[3,4,-1,1](https://marvel.bytedance.net/)] Output: 2 \r\n\r\n   Example 3:\r\n\r\n   Input: [[7,8,9,11,12](https://marvel.bytedance.net/)] Output: 1\r\n\r\n   假设传入的数组长度在10000以内。\r\n\r\n   提示：数学上最小正整数是1\r\n\r\n    \r\n\r\n   不会，哭了。\r\n\r\n10. 前端方向你希望往哪边发展？我说了webgl，因为比较花哨。\r\n\r\n11. 有什么想问的吗？\r\n\r\n    问自己的不足。\r\n\r\n    问：你们阿里的后端用的哪些（面试官惊了：同学你串台了，这里不是阿里...）\r\n\r\n\r\n\r\n### 美团 一面\r\n\r\n1. 自我介绍\r\n\r\n2. 介绍项目，觉得有哪些难点。\r\n\r\n3. Node事件循环，Koa的洋葱圈模型，Express和Koa的区别\r\n\r\n4. Node中有哪些全局变量\r\n\r\n5. 项目通常如何部署，pm2，很久以前用过。\r\n\r\n6. Vue和React对比\r\n\r\n7. Vuex的单向流动是如何实现的，我说熟悉Redux，扯到了redux的一些东西。\r\n\r\n8. HTML5有哪些新属性，Doctype的作用，Storage和cookie的对比，localStorage和sessionStorage的对比。\r\n\r\n9. Flex有哪些属性\r\n\r\n10. ES5的继承\r\n\r\n11. 跨域的介绍\r\n\r\n12. sameSite属性，最近默认值变成了lax\r\n\r\n13. linux用过吗，如何删某端口上的进程，ps aux | grep node查看node的进程。\r\n\r\n14. git有用过吗，git rebase知道吗\r\n\r\n15. 一个有序，可重复的数组[1, 2, 3, 3, 3, 3, 4, 5, 5, 6]，找到5最后的位置，空间复杂度logn\r\n\r\n    二分，不让用lastIndexOf\r\n\r\n16. 有什么想问的吗？ 问技术栈，美团主要用的vue，也有rn，小程序。\r\n\r\n\r\n\r\n都是些基础问题。\r\n\r\n### 美团 二面\r\n\r\n1. 学习前端的方式\r\n2. 讲个人理解中的前端。\r\n3. ES5和ES6的类\r\n4. Vue和React，更熟悉哪个。React的setState是同步的吗？二者的虚拟DOM之间有什么不同吗\r\n5. Vue双向绑定的实现原理\r\n6. 中间人攻击了解吗？原理\r\n7. 最近有了解过新技术吗\r\n8. 了解JS在浏览器的执行的底层原理吗（应该是想问V8啥的）\r\n9. 操作系统进程的通信方式\r\n10. 两个单向链表求交点\r\n11. n级台阶，一次可以走一阶或两阶，有多少种方式走？\r\n12. 二叉树的根是数组中的最大元素。左子树是通过数组中最大值左边部分构造出的最大二叉树。 右子树是通过数组中最大值右边部分构造出的最大二叉树。\r\n13. 意向各种城市，有在面其他公司吗，回答说拿了TX的offer了已经\r\n14. 想问的问题，无\r\n\r\n\r\n\r\n面累到了，就算能让我过我也不想面了...\r\n\r\n\r\n\r\n### 美团 HR面\r\n\r\n二面过了挺久，突然打个电话说我过了，不过offer被我拒了。\r\n\r\n\r\n\r\n## 校招面经\r\n\r\n六个小时结束了akara的秋招。\r\n\r\n### 字节跳动 一面\r\n\r\n1. 自我介绍，介绍项目。\r\n\r\n2. 几个小题目，看代码说结果\r\n\r\n3.  `[] == ![] `和`[] == []`的值（事后发现自己完全答反，万恶的隐式转换，神奇的JS）\r\n\r\n4. new 操作符原理\r\n\r\n5. 盒模型 `content-box`和`border-box`\r\n\r\n6. `display:none;visibility: hidden;opacity:0`的区别\r\n\r\n7. 事件模型，看代码说结果\r\n\r\n8. 状态码301，302，304\r\n\r\n9. 知道`referer`头部吗，直接请求服务器时`referer`是多少，顺便聊了其在CSRF中的作用\r\n\r\n10. 后端怎么让浏览器中的Cookie过期\r\n\r\n11. CSS动画，`transition`和`animation`，哪一个性能更好\r\n\r\n12. Koa和Express的区别，以及Koa中间件的原理\r\n\r\n13. Vue的`v-model`的原理，Vue实例是怎么拿到data属性的\r\n\r\n14. Hash和History模式的区别，原理\r\n\r\n15. React的Fiber的原理，知道怎么实现的吗，是否了解Hook的实现原理\r\n\r\n16. 聊了一下Redux和React-Redux\r\n\r\n17. 给定一个字符串，输出该字符串所有排列的可能。如输入“abc”，输出“abc,acb,bca,bac,cab,cba”。\r\n\r\n    ``` js\r\n    function fullpermutate(str) {  var result = [];  return result;}\r\n    ```\r\n\r\n18. 多行字符串转二维数组\r\n\r\n    ``` js\r\n    const str=`\r\n    1 21    3\r\n    \r\n      4 5  6\r\n     7   8 9\r\n    `\r\n    [\r\n        ['1', '12', '3'],\r\n        ['4', '5', '6'],\r\n        ['7', '8', '9'],\r\n    ]\r\n    ```\r\n\r\n19. 获得页面所有节点数\r\n\r\n20. 有什么问我的吗\r\n\r\n### 字节跳动 二面\r\n\r\n1. 聊了一下项目\r\n\r\n2. 算法题。判断堆栈的出栈顺序是否合理。\r\n\r\n   ``` js\r\n   validStack(inArr, outArr)\r\n   ```\r\n\r\n3. 两个同域的页面之间的通信。postMessage，storage（之前没了解过，原来这个可以监听的？）\r\n\r\n4. 如何统计用户的浏览时长，要考虑到用户会切换页面，缩放页面等。多个点进行上报时，如何区分这些数据来自于同一个会话？\r\n\r\n   https://yq.aliyun.com/articles/635301\r\n\r\n5. 实现一个sleep方法\r\n\r\n6. 函数防抖，函数节流\r\n\r\n7. HTTP和Websocket的联系\r\n\r\n8. 重排，重绘，合成层\r\n\r\n9. 了解过puppeteer吗\r\n\r\n   \r\n\r\n算法比较拉跨...\r\n\r\n### 字节跳动 三面\r\n\r\n1. 自我介绍\r\n\r\n2. 聊项目的一些东西，难点啥的，解决方案。\r\n\r\n3. 写代码。倒计时 截止时间 2020年11月11日 0点 \r\n\r\n   显示 “剩余XX天XX时XX分XX秒”\r\n\r\n   每秒刷新一次\r\n\r\n4. 怎么学习前端的，聊一下接下来的打算\r\n\r\n### 字节跳动 HR面\r\n\r\n基本都是聊家常了。"
    }
  ]
}